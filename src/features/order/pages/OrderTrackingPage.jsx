import { useParams, useNavigate } from "react-router-dom";
import { useOrderTracking } from "../hooks/useOrderTracking";
import { ArrowLeft, Truck, CheckCircle, XCircle } from "lucide-react";

export default function OrderTrackingPage() {
  const { id } = useParams(); // L·∫•y orderId t·ª´ URL
  const navigate = useNavigate();

  const { order, loading, error } = useOrderTracking(id);

  if (loading)
    return (
      <div className="flex justify-center items-center h-screen text-gray-600">
        ƒêang t·∫£i d·ªØ li·ªáu theo d√µi ƒë∆°n h√†ng...
      </div>
    );

  if (error)
    return (
      <div className="flex flex-col justify-center items-center h-screen text-red-600">
        <p>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng.</p>
        <p className="text-sm">{error.message || String(error)}</p>
      </div>
    );

  if (!order)
    return (
      <div className="flex justify-center items-center h-screen text-gray-600">
        Kh√¥ng c√≥ d·ªØ li·ªáu theo d√µi.
      </div>
    );

  // D·ªØ li·ªáu t·ª´ backend
  const {
    orderId,
    status,
    shippingAddress,
    createdAt,
    updatedAt,
    distanceKm,
    estimateMinutes,
    estimatedDeliveryTime,
  } = order;

  // Hi·ªÉn th·ªã label th√¢n thi·ªán
  const statusLabel = {
    new: "Ch·ªù x√°c nh·∫≠n",
    confirmed: "ƒê√£ x√°c nh·∫≠n",
    shipping: "ƒêang v·∫≠n chuy·ªÉn",
    done_shipping: "ƒê√£ giao cho kh√°ch",
    completed: "Ho√†n t·∫•t ƒë∆°n h√†ng",
    cancelled: "ƒê√£ h·ªßy",
    cancel_requested: "Kh√°ch y√™u c·∫ßu h·ªßy",
    shipper_cancel_requested: "Shipper y√™u c·∫ßu h·ªßy",
    refund: "Ho√†n tr·∫£ / ho√†n ti·ªÅn",
  }[status];

  // Ti·∫øn tr√¨nh m√¥ ph·ªèng theo tr·∫°ng th√°i
  const statusProgressMap = {
    new: 10,
    confirmed: 30,
    shipping: 60,
    done_shipping: 85,
    completed: 100,
    cancelled: 100,
  };
  const progress = statusProgressMap[status] || 0;

  const formatTime = (iso) =>
    new Date(iso).toLocaleString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
    });

  return (
    <div className="flex flex-col items-center p-4 bg-gray-50 min-h-screen">
      {/* N√∫t quay l·∫°i */}
      <div className="flex items-center w-full max-w-2xl mb-2">
        <button
          onClick={() => navigate(-1)}
          className="flex items-center text-blue-600 hover:text-blue-800"
        >
          <ArrowLeft className="w-5 h-5 mr-1" /> Quay l·∫°i
        </button>
      </div>

      {/* Khung n·ªôi dung */}
      <div className="w-full max-w-2xl bg-white p-6 rounded-2xl shadow">
        <h1 className="text-xl font-bold mb-3">
          üöö Theo d√µi ƒë∆°n h√†ng #{orderId}
        </h1>

        <p className="text-gray-700">
          <span className="font-medium">Tr·∫°ng th√°i:</span>{" "}
          <span className="text-blue-600 font-semibold">{statusLabel}</span>
        </p>
        <p className="text-gray-700">
          <span className="font-medium">Ng√†y ƒë·∫∑t:</span> {formatTime(createdAt)}
        </p>
        <p className="text-gray-700">
          <span className="font-medium">C·∫≠p nh·∫≠t g·∫ßn nh·∫•t:</span>{" "}
          {formatTime(updatedAt)}
        </p>
        <p className="text-gray-700">
          <span className="font-medium">ƒê·ªãa ch·ªâ giao:</span>{" "}
          {shippingAddress?.address}, {shippingAddress?.city}
        </p>
        <p className="text-gray-700">
          <span className="font-medium">Kho·∫£ng c√°ch:</span> {distanceKm} km (∆∞·ªõc
          t√≠nh)
        </p>
        <p className="text-gray-700 mb-2">
          <span className="font-medium">Th·ªùi gian giao d·ª± ki·∫øn:</span>{" "}
          {formatTime(estimatedDeliveryTime)}{" "}
          <span className="text-gray-500 text-sm">
            (~ {estimateMinutes} ph√∫t)
          </span>
        </p>

        {/* Thanh ti·∫øn tr√¨nh */}
        <div className="w-full bg-gray-200 rounded-full h-3 my-4">
          <div
            className={`h-3 rounded-full transition-all duration-500 ${
              status === "cancelled" ? "bg-red-400" : "bg-blue-500"
            }`}
            style={{ width: `${progress}%` }}
          />
        </div>

        {/* M√¥ t·∫£ tr·∫°ng th√°i */}
        <div className="flex items-center space-x-3 text-gray-600 mt-2">
          {status === "completed" ? (
            <CheckCircle className="text-green-500 w-6 h-6" />
          ) : status.includes("cancel") ? (
            <XCircle className="text-red-500 w-6 h-6" />
          ) : (
            <Truck className="text-blue-500 w-6 h-6" />
          )}
          <span>
            {status === "completed"
              ? "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng."
              : status === "cancelled"
              ? "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy."
              : "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c v·∫≠n chuy·ªÉn..."}
          </span>
        </div>
      </div>
    </div>
  );
}
