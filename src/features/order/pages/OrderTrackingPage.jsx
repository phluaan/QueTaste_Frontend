import { useEffect, useState } from "react";
import { CheckCircle, Clock, Truck, MapPin, Package } from "lucide-react";

export default function OrderTrackingList() {
  const [driverPos, setDriverPos] = useState([10.7769, 106.7009]);
  const customerPos = [10.7626, 106.6822];
  const [progress, setProgress] = useState(0); // 0‚Äì100 %

  // M√¥ ph·ªèng shipper di chuy·ªÉn, c·∫≠p nh·∫≠t % ho√†n th√†nh
  useEffect(() => {
    const totalDistance = Math.sqrt(
      Math.pow(customerPos[0] - driverPos[0], 2) +
        Math.pow(customerPos[1] - driverPos[1], 2)
    );
    let distance = totalDistance;

    const interval = setInterval(() => {
      setDriverPos(([lat, lng]) => {
        const [targetLat, targetLng] = customerPos;
        const step = 0.0005;
        const dirLat = targetLat > lat ? step : -step;
        const dirLng = targetLng > lng ? step : -step;
        const newLat = lat + dirLat;
        const newLng = lng + dirLng;

        // t√≠nh % ho√†n th√†nh
        distance = Math.sqrt(
          Math.pow(customerPos[0] - newLat, 2) +
            Math.pow(customerPos[1] - newLng, 2)
        );
        const percent = Math.max(0, 100 - (distance / totalDistance) * 100);
        setProgress(percent);

        return [newLat, newLng];
      });
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  // C√°c m·ªëc tr·∫°ng th√°i
  const steps = [
    {
      id: 1,
      label: "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng",
      icon: <CheckCircle className="text-green-500 w-5 h-5" />,
      time: "14:00 h√¥m nay",
    },
    {
      id: 2,
      label: "ƒêang chu·∫©n b·ªã h√†ng",
      icon: <Package className="text-yellow-500 w-5 h-5" />,
      time: "14:10 h√¥m nay",
    },
    {
      id: 3,
      label: "ƒêang giao h√†ng",
      icon: <Truck className="text-blue-500 w-5 h-5" />,
      time: "14:30 h√¥m nay",
    },
    {
      id: 4,
      label: "ƒêang ƒë·∫øn g·∫ßn ƒë·ªãa ch·ªâ giao",
      icon: <MapPin className="text-purple-500 w-5 h-5" />,
      time: "15:00 h√¥m nay",
    },
    {
      id: 5,
      label: "Giao h√†ng th√†nh c√¥ng",
      icon: <CheckCircle className="text-green-600 w-5 h-5" />,
      time: "15:30 h√¥m nay",
    },
  ];

  // X√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªán t·∫°i theo % progress
  const currentStepIndex =
    progress < 20
      ? 0
      : progress < 40
      ? 1
      : progress < 70
      ? 2
      : progress < 99
      ? 3
      : 4;

  return (
    <div className="flex flex-col items-center p-4 space-y-4 bg-gray-50 min-h-screen">
      <div className="w-full max-w-2xl bg-white p-5 rounded-2xl shadow">
        <h1 className="text-xl font-bold mb-2">
          üöö Theo d√µi ƒë∆°n h√†ng #ORD12345
        </h1>
        <p className="text-gray-600">
          Tr·∫°ng th√°i:{" "}
          <span className="font-semibold text-blue-600">
            {steps[currentStepIndex].label}
          </span>
        </p>
        <p className="text-gray-600">Ng∆∞·ªùi giao: Nguy·ªÖn VƒÉn A</p>
        <p className="text-gray-600 mb-4">
          D·ª± ki·∫øn giao: <span className="font-semibold">15:30 h√¥m nay</span>
        </p>

        {/* Thanh ti·∫øn tr√¨nh */}
        <div className="w-full bg-gray-200 rounded-full h-3 mb-6">
          <div
            className="bg-blue-500 h-3 rounded-full transition-all duration-500"
            style={{ width: `${progress}%` }}
          />
        </div>

        {/* Danh s√°ch tr·∫°ng th√°i */}
        <ul className="space-y-4">
          {steps.map((step, index) => (
            <li
              key={step.id}
              className={`flex items-center space-x-3 ${
                index <= currentStepIndex ? "opacity-100" : "opacity-40"
              }`}
            >
              <div
                className={`${
                  index <= currentStepIndex ? "bg-blue-100" : "bg-gray-100"
                } p-2 rounded-full`}
              >
                {step.icon}
              </div>
              <div>
                <p
                  className={`font-medium ${
                    index <= currentStepIndex
                      ? "text-gray-800"
                      : "text-gray-500"
                  }`}
                >
                  {step.label}
                </p>
                <p className="text-sm text-gray-400">{step.time}</p>
              </div>
            </li>
          ))}
        </ul>
      </div>

      <div className="text-sm text-gray-400">
        C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªói 2 gi√¢y (m√¥ ph·ªèng)
      </div>
    </div>
  );
}
